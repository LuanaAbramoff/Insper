library ieee;
use ieee.std_logic_1164.all;

entity Aula14 is
  -- Total de bits das entradas e saidas
  generic ( larguraDados : natural := 32;
        larguraEnderecos : natural := 32;
        simulacao : boolean := TRUE -- para gravar na placa, altere de TRUE para FALSE
  );   
  port   (
    CLOCK_50 : in std_logic;
	 KEY: in std_logic_vector(3 downto 0);
	 
    PC_OUT: out std_logic_vector(larguraEnderecos-1 downto 0);
	 Saida_ULA: out std_logic_vector(larguraDados-1 downto 0);
	 Dados_RAM_In: out std_logic_vector(larguraDados-1 downto 0);
	 Dados_RAM_Out: out std_logic_vector(larguraDados-1 downto 0)

  );
end entity;


architecture arquitetura of Aula14 is

  signal PC_Saida              : std_logic_vector(larguraEnderecos-1 downto 0);
  signal PC_Mais_4_Somador_PC  : std_logic_vector(larguraEnderecos-1 downto 0);
  signal Instrucao_Saida_ROM   : std_logic_vector(larguraEnderecos-1 downto 0);
  
  signal Dado_Rs 						: std_logic_vector(larguraDados-1 downto 0);
  signal Dado_Rt_RAM           : std_logic_vector(larguraDados-1 downto 0);
  signal Dado_RAM_Rt           : std_logic_vector(larguraDados-1 downto 0);
  
  signal Imediato_Estendido    : std_logic_vector(larguraDados-1 downto 0);
  signal EnderecoRAM_ULA_RAM   : std_logic_vector(larguraEnderecos-1 downto 0);
  
  signal Palavra_Controle      : std_logic_vector(3 downto 0);
  signal CLK						 : std_logic;
  
  
  --atribuições Instrução
  alias opcode						 : std_logic_vector(5 downto 0)  is Instrucao_Saida_ROM(31 downto 26);
  alias Endereco_Rs				 : std_logic_vector(4 downto 0)  is Instrucao_Saida_ROM(25 downto 21);
  alias Endereco_Rt				 : std_logic_vector(4 downto 0)  is Instrucao_Saida_ROM(20 downto 16);
  alias Imediato    				 : std_logic_vector(15 downto 0) is Instrucao_Saida_ROM(15 downto 0);
  
  --atrbuição Controle
  alias habEscritaMEM          : std_logic is Palavra_Controle(3);
  alias habLeituraMEM          : std_logic is Palavra_Controle(2);
  alias habEscrita_Banco_Regs	 : std_logic is Palavra_Controle(1);
  alias OpULA              	 : std_logic is Palavra_Controle(0);

begin

-- Instanciando os componentes:

-- Para simular, fica mais simples tirar o edgeDetector
gravar:  if simulacao generate
CLK <= KEY(0);
else generate
detectorSub0: work.edgeDetector(bordaSubida)
        port map (clk => CLOCK_50, entrada => (not KEY(0)), saida => CLK);
end generate;

PC : entity work.registradorGenerico   generic map (larguraDados => larguraEnderecos)
          port map (DIN => PC_Mais_4_Somador_PC, DOUT => PC_Saida, ENABLE => '1', CLK => CLK, RST => '0');
			 
incrementaPC :  entity work.somaConstante  generic map (larguraDados => larguraEnderecos, constante => 4)
        port map( entrada => PC_Saida, saida => PC_Mais_4_Somador_PC);
		  
		  
-- Falta acertar o conteudo da ROM (no arquivo memoriaROM.vhd)
ROM : entity work.ROMMIPS   generic map (dataWidth => larguraDados, addrWidth => larguraEnderecos, memoryAddrWidth => 6)
          port map (Endereco => PC_Saida, Dado => Instrucao_Saida_ROM);
			 
decoderInstru : entity work.decoderGeneric
          port map (entrada => opcode , saida => Palavra_Controle);
			 
bancoRegs : entity work.bancoReg generic map (larguraDados => larguraDados, larguraEndBancoRegs => 5)
          port map ( clk => CLK,
              enderecoA => Endereco_Rs,
              enderecoB => Endereco_Rt,
              enderecoC => Endereco_Rt,
              dadoEscritaC => Dado_RAM_Rt,
              escreveC => habEscrita_Banco_Regs,
              saidaA => Dado_Rs,
              saidaB  => Dado_Rt_RAM);
				  
RAM : entity work.RAMMIPS generic map (dataWidth => larguraDados, addrWidth => larguraEnderecos, memoryAddrWidth => 6)
                   port map (Endereco => EnderecoRAM_ULA_RAM,
										we => habEscritaMEM, 
										re => habLeituraMEM, 
										habilita  => '1', 
										Dado_in => Dado_Rt_RAM, 
										Dado_out => Dado_RAM_Rt, 
										clk => CLK);
										
estendeSinal : entity work.estendeSinalGenerico   generic map (larguraDadoEntrada => 16, larguraDadoSaida => larguraDados)
          port map (estendeSinal_IN => Imediato, estendeSinal_OUT =>  Imediato_Estendido);
			 
			 -- O port map completo da ULA:
ULA : entity work.ULASomaSub  generic map(larguraDados => larguraDados)
          port map (entradaA => Dado_Rs, 
						  entradaB => Imediato_Estendido, 
						  saida => EnderecoRAM_ULA_RAM, 
						  seletor => OpULA);
						  
PC_OUT        <= PC_Saida;
Saida_ULA     <= EnderecoRAM_ULA_RAM;
Dados_RAM_In  <= Dado_Rt_RAM;
Dados_RAM_Out <= Dado_RAM_Rt;
			 
			 
end architecture;